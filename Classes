
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class Usuarios extends JFrame {


	// DECLARAÇÃO DE VARIAVEIS
	
		private JLabel label1,label2,label3,label4,label5;
		private JButton btProximo,btAnterior,btSair,btAdicionar,btExcluir,btLocalizar,btAlterar;
		private JTextField tfCodigo, tfNome, tfEmail,tfTelefone;
		private PreparedStatement stm;
		private ResultSet result;
		private BANCO bd;
		
		
		// FRAME
		
		public static void main(String[]args) {
			JFrame frame = new Usuarios();
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setVisible(true);
		
			
		}
		
		public Usuarios() throws HeadlessException {
	        inicializarComponentes();
	        definirEventos(); {
			
		}
		

	}
		private void inicializarComponentes() {
			
			setTitle("Agenda dos Usuários");
			setBounds(200,200,580,420);
			
			
			label5 = new JLabel("Agenda");
			label5.setFont(new Font("Arial", Font.PLAIN, 24));
			label5.setBounds(270,3,90,30);
			add(label5);
			
			
			setLayout(new FlowLayout(FlowLayout.LEFT));
			setLayout(null);
			
			label1 = new JLabel("Código");
			tfCodigo = new JTextField(10);
			label1.setBounds(20,30,60,20);
			tfCodigo.setBounds(80,33,160,20);
			add(label1);
			add(tfCodigo);
			
			label2 = new JLabel("Nome");
			tfNome = new JTextField(20);
			label2.setBounds(20,70,60,20);
			tfNome.setBounds(80,73,160,20);
			add(label2);
			add(tfNome);
			
		
			label3 = new JLabel("Email");
			tfEmail = new JTextField(30);
			label3.setBounds(20,110,60,20);
			tfEmail.setBounds(80,113,160,20);
			add(label3);
			add(tfEmail);
			
			label4 = new JLabel("Telefone");
			tfTelefone = new JTextField(30);
			label4.setBounds(20,150,60,20);
			tfTelefone.setBounds(80,153,160,20);
			add(label4);
			add(tfTelefone);
			
			
			
			
			btProximo = new JButton("Proximo");
			btProximo.setBounds(20,200,100,20);
			add(btProximo);
			btProximo.setToolTipText("proximo");
			
			btAnterior = new JButton("Anterior");
			btAnterior.setBounds(150,200,100,20);
			add(btAnterior);
			btAnterior.setToolTipText("Anterior");
			
			btSair = new JButton("Sair");
			add(btSair);
			btSair.setToolTipText("Sair");
			
			
			btAdicionar = new JButton("Adicionar");
			btAdicionar.setBounds(450,50,100,20);
			add(btAdicionar);
			btAdicionar.setToolTipText("Adicionar");
			
			btExcluir = new JButton("Excluir");
			btExcluir.setBounds(450,90,100,20);
			add(btExcluir);
			btExcluir.setToolTipText("Excluir");
			
			btLocalizar = new JButton("Localizar");
			btLocalizar.setBounds(450,130,100,20);
			add(btLocalizar);
			btLocalizar.setToolTipText("Localizar");
			
			btAlterar = new JButton("Editar");
			btAlterar.setBounds(450, 170, 100, 20); 
			add(btAlterar);
			btAlterar.setToolTipText("Alterar");
			
			
			// CONEXAO COM O BANCO
			bd = new BANCO();
			if(!bd.getConnection()) {
				JOptionPane.showMessageDialog(null, "Falha ao acessar  o banco");
			}
			carregarTabelas();
			atualizarCampos();
		
		}
		
		private void definirEventos() {
			
			
			// BOTÃO PROXIMO
			btProximo.addActionListener(e -> {
				try {
					if(!result.isLast()) {
						result.next();
						atualizarCampos();
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			});
			
			// BOTÃO ANTERIOR
			btAnterior.addActionListener(e -> {
				try {
					if(!result.isFirst()) {
						result.previous();
						atualizarCampos();
						
					}
				} catch (Exception ex) {
					ex.printStackTrace();
				}
				
			});
			
			//BOTÃO SAIR
			
			btSair.addActionListener(e -> {
				try {
					if(result != null)result.close();
					if(stm != null)stm.close();
				} catch (Exception ex) {
					ex.printStackTrace();
				}
				bd.close();
				System.exit(0);
			});
			
			// BOTÃO ADICIONAR 
			
			btAdicionar.addActionListener(e -> {
			    AdicionarContato dialog = new AdicionarContato(this, bd);
			    dialog.setVisible(true);

			  
			    carregarTabelas();
			    try {
			        if (result.first()) {
			            atualizarCampos();
			        }
			    } catch (Exception ex) {
			        ex.printStackTrace();
			    }
			});

			
			// BOTÃO EXCXLUIR
			
			btExcluir.addActionListener(e -> {
			    try {
			        String codigo = tfCodigo.getText();

			        if (codigo.isEmpty()) { // isEmpty - VERIFICA SE A STRING ESTÁ VAZIA
			            JOptionPane.showMessageDialog(this, "Nenhum contato selecionado para excluir.");
			            return;
			        }

			        int confirmacao = JOptionPane.showConfirmDialog(
			            this,
			            "Tem certeza que deseja excluir o contato?",
			            "Confirmar Exclusão",
			            JOptionPane.YES_NO_OPTION // OPÇÃO "SIM" E "NÃO" PARA O USUARIOS RESPONDER
			        );
			        
			        // CASO RESPONDA "SIM"

			        if (confirmacao == JOptionPane.YES_OPTION) {
			            String sql = "DELETE FROM Informacoes WHERE Codigo = ?";
			            try (PreparedStatement stmt = bd.con.prepareStatement(sql)) {
			                stmt.setInt(1, Integer.parseInt(codigo)); // stmt.setInt(1, Integer -  SUBSTITUINDO O "?" DO BANCO = CODIGO
			                int linhasAfetadas = stmt.executeUpdate(); // executeUpdate -- COMANDO PARA MODIFICAR O BANCO

			                if (linhasAfetadas > 0) {
			                    JOptionPane.showMessageDialog(this, "Contato excluído com sucesso!");
			                    carregarTabelas();
			                    if (result.first()) {
			                        atualizarCampos();
			                    } else {
			                        tfCodigo.setText("");
			                        tfNome.setText("");
			                        tfEmail.setText("");
			                        tfTelefone.setText("");
			                    }
			                } else {
			                    JOptionPane.showMessageDialog(this, "Nenhum contato encontrado com esse código.");
			                }
			            }
			        }

			    } catch (Exception ex) {
			        ex.printStackTrace();
			        JOptionPane.showMessageDialog(this, "Erro ao excluir contato: " + ex.getMessage());
			    }
			});

			// BOTÃO LOCALIZAR
			
			btLocalizar.addActionListener(e -> {
			    String nomeProcurado = JOptionPane.showInputDialog(this, "Digite o nome do contato:");
			    
			    if (nomeProcurado == null || nomeProcurado.trim().isEmpty()) {
			        return; 
			    }

			    String sql = "SELECT * FROM Informacoes WHERE Nome LIKE ?";
			    try (PreparedStatement stmt = bd.con.prepareStatement(
			        sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)) {

			        stmt.setString(1, "%" + nomeProcurado + "%");
			        ResultSet resultadoBusca = stmt.executeQuery();

			        if (resultadoBusca.next()) {
			            // MOSTRAR RESULTADO ENCONTRADO
			            tfCodigo.setText(resultadoBusca.getString("Codigo"));
			            tfNome.setText(resultadoBusca.getString("Nome"));
			            tfEmail.setText(resultadoBusca.getString("Email"));
			            tfTelefone.setText(resultadoBusca.getString("Telefone"));
			        } else {
			            JOptionPane.showMessageDialog(this, "Contato não encontrado.");
			        }

			    } catch (Exception ex) {
			        ex.printStackTrace();
			        JOptionPane.showMessageDialog(this, "Erro ao localizar contato: " + ex.getMessage());
			    }
			});
			
			
			// BOTÃO ALTERAR
			 btAlterar.addActionListener(e -> {
		            AlterarContato dialog = new AlterarContato(this, bd, result);
		            dialog.setVisible(true);

		            carregarTabelas();
		            try {
		                if (result.first()) {
		                    atualizarCampos();
		                }
		            } catch (Exception ex) {
		                ex.printStackTrace();
		            }
		        });
		    }
		
		private void carregarTabelas() {
			String sql = "SELECT * FROM Informacoes";
			try {
				stm = bd.con.prepareStatement(
				sql,
				ResultSet.TYPE_SCROLL_INSENSITIVE,
				ResultSet.CONCUR_READ_ONLY
				);
				result = stm.executeQuery();
						
			} catch (Exception e) {
				JOptionPane.showMessageDialog(null, "Erro ao conectar banco" + e.toString());
			}
			
		}
		

		private void atualizarCampos() {
			try {
				if(result ==  null || result.isAfterLast() || result.isBeforeFirst()) return;
				
				tfCodigo.setText(result.getString("Codigo"));
				tfNome.setText(result.getString("Nome"));
				tfEmail.setText(result.getString("Email"));
				tfTelefone.setText(result.getString("Telefone"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		}

		

		
}

		
